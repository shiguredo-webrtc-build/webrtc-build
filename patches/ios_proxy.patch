diff --git a/sdk/objc/api/peerconnection/RTCPeerConnection+Private.h b/sdk/objc/api/peerconnection/RTCPeerConnection+Private.h
index c9a955ec63..45ab5eae79 100644
--- a/sdk/objc/api/peerconnection/RTCPeerConnection+Private.h
+++ b/sdk/objc/api/peerconnection/RTCPeerConnection+Private.h
@@ -107,6 +107,19 @@ class PeerConnectionDelegateAdapter : public PeerConnectionObserver {
                delegate:(nullable id<RTC_OBJC_TYPE(RTCPeerConnectionDelegate)>)
                             delegate;
 
+- (nullable instancetype)
+        initWithFactory:(RTC_OBJC_TYPE(RTCPeerConnectionFactory) *)factory
+          configuration:(RTC_OBJC_TYPE(RTCConfiguration) *)configuration
+            constraints:(RTC_OBJC_TYPE(RTCMediaConstraints) *)constraints
+    certificateVerifier:(nullable id<RTC_OBJC_TYPE(RTCSSLCertificateVerifier)>)certificateVerifier
+               delegate:(nullable id<RTC_OBJC_TYPE(RTCPeerConnectionDelegate)>)delegate
+              proxyType:(RTCProxyType)proxyType
+             proxyAgent:(NSString*)proxyAgent
+          proxyHostname:(NSString*)proxyHostname
+              proxyPort:(int)proxyPort
+          proxyUsername:(NSString*)proxyUsername
+          proxyPassword:(NSString*)proxyPassword;
+
 /** Initialize an RTCPeerConnection with a configuration, constraints,
  *  delegate and PeerConnectionDependencies.
  */
diff --git a/sdk/objc/api/peerconnection/RTCPeerConnection.h b/sdk/objc/api/peerconnection/RTCPeerConnection.h
index fb5c414815..a1fd77a74d 100644
--- a/sdk/objc/api/peerconnection/RTCPeerConnection.h
+++ b/sdk/objc/api/peerconnection/RTCPeerConnection.h
@@ -82,6 +82,13 @@ typedef NS_ENUM(NSInteger, RTCStatsOutputLevel) {
   RTCStatsOutputLevelDebug,
 };
 
+typedef NS_ENUM(NSInteger, RTCProxyType) {
+  RTCProxyTypeNone,
+  RTCProxyTypeHttps,
+  RTCProxyTypeSocks5,
+  RTCProxyTypeUnknown,
+};
+
 typedef void (^RTCCreateSessionDescriptionCompletionHandler)(
     RTC_OBJC_TYPE(RTCSessionDescription) *_Nullable sdp,
     NSError *_Nullable error);
diff --git a/sdk/objc/api/peerconnection/RTCPeerConnection.mm b/sdk/objc/api/peerconnection/RTCPeerConnection.mm
index cc92c6b51f..360ce6931f 100644
--- a/sdk/objc/api/peerconnection/RTCPeerConnection.mm
+++ b/sdk/objc/api/peerconnection/RTCPeerConnection.mm
@@ -28,6 +28,8 @@
 
 #include <memory>
 
+#include "api/environment/environment.h"
+#include "api/environment/environment_factory.h"
 #include "api/jsep_ice_candidate.h"
 #include "api/rtc_event_log_output_file.h"
 #include "api/set_local_description_observer_interface.h"
@@ -474,6 +476,37 @@ JsepIceCandidate remote_candidate_wrapper(
 
 }  // namespace webrtc
 
+#include "p2p/client/basic_port_allocator.h"
+#include "pc/rtp_media_utils.h"
+#include "rtc_base/proxy_info_revive.h"
+
+namespace webrtc {
+
+class RawCryptString : public webrtc::revive::CryptStringImpl {
+ public:
+  RawCryptString(const std::string& str) : str_(str) {}
+  size_t GetLength() const override { return str_.size(); }
+  void CopyTo(char* dest, bool nullterminate) const override {
+    for (int i = 0; i < (int)str_.size(); i++) {
+      *dest++ = str_[i];
+    }
+    if (nullterminate) {
+      *dest = '\0';
+    }
+  }
+  std::string UrlEncode() const override { return ""; }
+  webrtc::revive::CryptStringImpl* Copy() const override { return new RawCryptString(str_); }
+  void CopyRawTo(std::vector<unsigned char>* dest) const override {
+    dest->assign(str_.begin(), str_.end());
+  }
+
+ private:
+  std::string str_;
+};
+
+}  // namespace webrtc
+
+
 @implementation RTC_OBJC_TYPE (RTCPeerConnection) {
   RTC_OBJC_TYPE(RTCPeerConnectionFactory) * _factory;
   NSMutableArray<RTC_OBJC_TYPE(RTCMediaStream) *> *_localStreams;
@@ -507,6 +540,56 @@ @implementation RTC_OBJC_TYPE (RTCPeerConnection) {
                            delegate:delegate];
 }
 
+- (nullable instancetype)initWithFactory:(RTC_OBJC_TYPE(RTCPeerConnectionFactory) *)factory
+                           configuration:(RTC_OBJC_TYPE(RTCConfiguration) *)configuration
+                             constraints:(RTC_OBJC_TYPE(RTCMediaConstraints) *)constraints
+                     certificateVerifier:
+                         (nullable id<RTC_OBJC_TYPE(RTCSSLCertificateVerifier)>)certificateVerifier
+                                delegate:(id<RTC_OBJC_TYPE(RTCPeerConnectionDelegate)>)delegate
+                               proxyType:(RTCProxyType)proxyType
+                              proxyAgent:(NSString*)proxyAgent
+                           proxyHostname:(NSString*)proxyHostname
+                               proxyPort:(int)proxyPort
+                           proxyUsername:(NSString*)proxyUsername
+                           proxyPassword:(NSString*)proxyPassword {
+  NSParameterAssert(factory);
+  std::unique_ptr<webrtc::PeerConnectionDependencies> dependencies =
+      std::make_unique<webrtc::PeerConnectionDependencies>(nullptr);
+  if (certificateVerifier != nil) {
+    dependencies->tls_cert_verifier = webrtc::ObjCToNativeCertificateVerifier(certificateVerifier);
+  }
+  if (proxyType != RTCProxyTypeNone) {
+    std::unique_ptr<webrtc::PeerConnectionInterface::RTCConfiguration> config(
+        [configuration createNativeConfiguration]);
+    auto context = factory.connectionContext;
+    webrtc::EnvironmentFactory env_factory(context->env());
+    const webrtc::Environment env = env_factory.Create();
+
+    dependencies->allocator.reset(new webrtc::BasicPortAllocator(
+        env, context->default_network_manager(), context->default_socket_factory(),
+        config->turn_customizer));
+    dependencies->allocator->SetPortRange(
+        config->port_allocator_config.min_port,
+        config->port_allocator_config.max_port);
+    dependencies->allocator->set_flags(config->port_allocator_config.flags);
+
+    webrtc::revive::ProxyInfo pi;
+    pi.type =
+        proxyType == RTCProxyTypeNone ? webrtc::revive::PROXY_NONE :
+        proxyType == RTCProxyTypeHttps ? webrtc::revive::PROXY_HTTPS :
+        proxyType == RTCProxyTypeSocks5 ? webrtc::revive::PROXY_SOCKS5 : webrtc::revive::PROXY_UNKNOWN;
+    pi.address = rtc::SocketAddress([proxyHostname UTF8String], proxyPort);
+    pi.username = [proxyUsername UTF8String];
+    pi.password = webrtc::revive::CryptString(webrtc::RawCryptString([proxyPassword UTF8String]));
+    dependencies->allocator->set_proxy([proxyAgent UTF8String], pi);
+  }
+  return [self initWithDependencies:factory
+                      configuration:configuration
+                        constraints:constraints
+                       dependencies:std::move(dependencies)
+                           delegate:delegate];
+}
+
 - (nullable instancetype)
     initWithDependencies:(RTC_OBJC_TYPE(RTCPeerConnectionFactory) *)factory
            configuration:(RTC_OBJC_TYPE(RTCConfiguration) *)configuration
diff --git a/sdk/objc/api/peerconnection/RTCPeerConnectionFactory+Private.h b/sdk/objc/api/peerconnection/RTCPeerConnectionFactory+Private.h
index 510ee32614..3ef2a0e64d 100644
--- a/sdk/objc/api/peerconnection/RTCPeerConnectionFactory+Private.h
+++ b/sdk/objc/api/peerconnection/RTCPeerConnectionFactory+Private.h
@@ -13,6 +13,7 @@
 #include "api/peer_connection_interface.h"
 #include "api/scoped_refptr.h"
 #include "rtc_base/thread.h"
+#include "pc/connection_context.h"
 
 NS_ASSUME_NONNULL_BEGIN
 
@@ -32,6 +33,7 @@ NS_ASSUME_NONNULL_BEGIN
 @property(nonatomic, readonly) webrtc::Thread* workerThread;
 @property(nonatomic, readonly) webrtc::Thread* networkThread;
 
+    @property(nonatomic, readonly) rtc::scoped_refptr<webrtc::ConnectionContext> connectionContext;
 @end
 
 NS_ASSUME_NONNULL_END
diff --git a/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.h b/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.h
index abfa679a1c..8287bcf3d0 100644
--- a/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.h
+++ b/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.h
@@ -35,6 +35,8 @@ NS_ASSUME_NONNULL_BEGIN
 @protocol RTC_OBJC_TYPE
 (RTCAudioDevice);
 
+typedef NS_ENUM(NSInteger, RTCProxyType);
+
 RTC_OBJC_EXPORT
 @interface RTC_OBJC_TYPE (RTCPeerConnectionFactory) : NSObject
 
@@ -130,6 +132,19 @@ RTC_OBJC_EXPORT
                            delegate:(nullable id<RTC_OBJC_TYPE(
                                          RTCPeerConnectionDelegate)>)delegate;
 
+- (nullable RTC_OBJC_TYPE(RTCPeerConnection) *)
+    peerConnectionWithConfiguration:(RTC_OBJC_TYPE(RTCConfiguration) *)configuration
+                        constraints:(RTC_OBJC_TYPE(RTCMediaConstraints) *)constraints
+                certificateVerifier:
+                    (nullable id<RTC_OBJC_TYPE(RTCSSLCertificateVerifier)>)certificateVerifier
+                           delegate:(nullable id<RTC_OBJC_TYPE(RTCPeerConnectionDelegate)>)delegate
+                          proxyType:(RTCProxyType)proxyType
+                         proxyAgent:(NSString*)proxyAgent
+                      proxyHostname:(NSString*)proxyHostname
+                          proxyPort:(int)proxyPort
+                      proxyUsername:(NSString*)proxyUsername
+                      proxyPassword:(NSString*)proxyPassword;
+
 /** Set the options to be used for subsequently created RTCPeerConnections */
 - (void)setOptions:
     (nonnull RTC_OBJC_TYPE(RTCPeerConnectionFactoryOptions) *)options;
diff --git a/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.mm b/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.mm
index 79afe271da..7e3f2e23f8 100644
--- a/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.mm
+++ b/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.mm
@@ -53,6 +53,68 @@
 #import "sdk/objc/native/api/audio_device_module.h"
 #endif
 
+#include <pc/peer_connection_factory.h>
+#include <pc/peer_connection_factory_proxy.h>
+#include <api/peer_connection_interface.h>
+#include <api/scoped_refptr.h>
+#include <pc/connection_context.h>
+#include <api/environment/environment_factory.h>
+
+namespace webrtc {
+
+// webrtc::PeerConnectionFactory から ConnectionContext を取り出す方法が無いので、
+// 継承して無理やり使えるようにする
+class PeerConnectionFactoryWithContext : public webrtc::PeerConnectionFactory {
+ public:
+  PeerConnectionFactoryWithContext(
+      webrtc::PeerConnectionFactoryDependencies dependencies)
+      : PeerConnectionFactoryWithContext(
+            webrtc::ConnectionContext::Create(CreateEnvironment(), &dependencies),
+            &dependencies) {}
+  PeerConnectionFactoryWithContext(
+      rtc::scoped_refptr<webrtc::ConnectionContext> context,
+      webrtc::PeerConnectionFactoryDependencies* dependencies)
+      : webrtc::PeerConnectionFactory(context, dependencies),
+        conn_context_(context) {}
+
+  static rtc::scoped_refptr<PeerConnectionFactoryWithContext> Create(
+      webrtc::PeerConnectionFactoryDependencies dependencies) {
+    return rtc::make_ref_counted<PeerConnectionFactoryWithContext>(
+        std::move(dependencies));
+  }
+
+  rtc::scoped_refptr<webrtc::ConnectionContext> GetContext() const {
+    return conn_context_;
+  }
+
+private:
+  rtc::scoped_refptr<webrtc::ConnectionContext> conn_context_;
+};
+
+rtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface>
+CreateModularPeerConnectionFactoryWithContext(
+    webrtc::PeerConnectionFactoryDependencies dependencies,
+    rtc::scoped_refptr<webrtc::ConnectionContext>& context) {
+  using result_type =
+      std::pair<rtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface>,
+                rtc::scoped_refptr<webrtc::ConnectionContext>>;
+  auto p = dependencies.signaling_thread->BlockingCall([&dependencies]() {
+        auto factory =
+            PeerConnectionFactoryWithContext::Create(std::move(dependencies));
+        if (factory == nullptr) {
+          return result_type(nullptr, nullptr);
+        }
+        auto context = factory->GetContext();
+        auto proxy = webrtc::PeerConnectionFactoryProxy::Create(
+            factory->signaling_thread(), factory->worker_thread(), factory);
+        return result_type(proxy, context);
+      });
+  context = p.second;
+  return p.first;
+}
+
+} // namespace webrtc
+
 @implementation RTC_OBJC_TYPE (RTCPeerConnectionFactory) {
   std::unique_ptr<webrtc::Thread> _networkThread;
   std::unique_ptr<webrtc::Thread> _workerThread;
@@ -61,6 +123,7 @@ @implementation RTC_OBJC_TYPE (RTCPeerConnectionFactory) {
 }
 
 @synthesize nativeFactory = _nativeFactory;
+@synthesize connectionContext = _connectionContext;
 
 - (webrtc::scoped_refptr<webrtc::AudioDeviceModule>)audioDeviceModule {
 #if defined(WEBRTC_IOS)
@@ -160,7 +223,7 @@ - (instancetype)initWithNativeDependencies:
     }
 
     _nativeFactory =
-        webrtc::CreateModularPeerConnectionFactory(std::move(dependencies));
+        webrtc::CreateModularPeerConnectionFactoryWithContext(std::move(dependencies), _connectionContext);
     NSAssert(_nativeFactory, @"Failed to initialize PeerConnectionFactory!");
   }
   return self;
@@ -336,6 +399,31 @@ - (instancetype)initWithMediaAndDependencies:
                                                        streamId:streamId];
 }
 
+- (nullable RTC_OBJC_TYPE(RTCPeerConnection) *)
+    peerConnectionWithConfiguration:(RTC_OBJC_TYPE(RTCConfiguration) *)configuration
+                        constraints:(RTC_OBJC_TYPE(RTCMediaConstraints) *)constraints
+                certificateVerifier:
+                    (nullable id<RTC_OBJC_TYPE(RTCSSLCertificateVerifier)>)certificateVerifier
+                           delegate:(nullable id<RTC_OBJC_TYPE(RTCPeerConnectionDelegate)>)delegate
+                          proxyType:(RTCProxyType)proxyType
+                         proxyAgent:(NSString*)proxyAgent
+                      proxyHostname:(NSString*)proxyHostname
+                          proxyPort:(int)proxyPort
+                      proxyUsername:(NSString*)proxyUsername
+                      proxyPassword:(NSString*)proxyPassword {
+  return [[RTC_OBJC_TYPE(RTCPeerConnection) alloc] initWithFactory:self
+                                                     configuration:configuration
+                                                       constraints:constraints
+                                               certificateVerifier:certificateVerifier
+                                                          delegate:delegate
+                                                         proxyType:proxyType
+                                                        proxyAgent:proxyAgent
+                                                     proxyHostname:proxyHostname
+                                                         proxyPort:proxyPort
+                                                     proxyUsername:proxyUsername
+                                                     proxyPassword:proxyPassword];
+}
+
 - (nullable RTC_OBJC_TYPE(RTCPeerConnection) *)
     peerConnectionWithConfiguration:
         (RTC_OBJC_TYPE(RTCConfiguration) *)configuration
