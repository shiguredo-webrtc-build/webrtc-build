diff --git a/sdk/android/api/org/webrtc/HardwareVideoEncoderFactory.java b/sdk/android/api/org/webrtc/HardwareVideoEncoderFactory.java
index d43fc27fa0..8cf6714de0 100644
--- a/sdk/android/api/org/webrtc/HardwareVideoEncoderFactory.java
+++ b/sdk/android/api/org/webrtc/HardwareVideoEncoderFactory.java
@@ -203,6 +203,7 @@ public class HardwareVideoEncoderFactory implements VideoEncoderFactory {
       case H264:
         return isHardwareSupportedInCurrentSdkH264(info);
       case H265:
+        return isHardwareSupportedInCurrentSdkH265(info);
       case AV1:
         return false;
     }
@@ -236,6 +237,10 @@ public class HardwareVideoEncoderFactory implements VideoEncoderFactory {
     return name.startsWith(QCOM_PREFIX) || name.startsWith(EXYNOS_PREFIX);
   }
 
+  private boolean isHardwareSupportedInCurrentSdkH265(MediaCodecInfo unusedInfo) {
+    return true;
+  }
+
   private boolean isMediaCodecAllowed(MediaCodecInfo info) {
     if (codecAllowedPredicate == null) {
       return true;
diff --git a/sdk/android/api/org/webrtc/VideoEncoder.java b/sdk/android/api/org/webrtc/VideoEncoder.java
index 0d8cf830ae..be62686e57 100644
--- a/sdk/android/api/org/webrtc/VideoEncoder.java
+++ b/sdk/android/api/org/webrtc/VideoEncoder.java
@@ -86,6 +86,8 @@ public interface VideoEncoder {
 
   public class CodecSpecificInfoH264 extends CodecSpecificInfo {}
 
+  public class CodecSpecificInfoH265 extends CodecSpecificInfo {}
+
   public class CodecSpecificInfoAV1 extends CodecSpecificInfo {}
 
   /**
diff --git a/sdk/android/src/java/org/webrtc/HardwareVideoEncoder.java b/sdk/android/src/java/org/webrtc/HardwareVideoEncoder.java
index 94dfdf0728..483d5b2d07 100644
--- a/sdk/android/src/java/org/webrtc/HardwareVideoEncoder.java
+++ b/sdk/android/src/java/org/webrtc/HardwareVideoEncoder.java
@@ -507,6 +507,10 @@ class HardwareVideoEncoder implements VideoEncoder {
         final int kLowH264QpThreshold = 24;
         final int kHighH264QpThreshold = 37;
         return new ScalingSettings(kLowH264QpThreshold, kHighH264QpThreshold);
+      } else if (codecType == VideoCodecMimeType.H265) {
+        final int kLowH265QpThreshold = 24;
+        final int kHighH265QpThreshold = 37;
+        return new ScalingSettings(kLowH265QpThreshold, kHighH265QpThreshold);
       }
     }
     return ScalingSettings.OFF;
